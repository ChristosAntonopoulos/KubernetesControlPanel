trigger:
  - master

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  dockerRegistry: '$(DOCKER_REGISTRY)'
  imageName: '$(IMAGE_NAME)'
  kubernetesNamespace: '$(KUBERNETES_NAMESPACE)'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Application'
    pool:
      name: 'kubernetes-server-pool'
    steps:
    - script: |
        dotnet --version
        node --version
        npm --version
      displayName: 'Display versions'

    - script: |
        dotnet restore $(solution)
      displayName: 'Restore NuGet packages'

    - script: |
        dotnet build $(solution) --configuration $(buildConfiguration) --no-restore
      displayName: 'Build solution'

    - script: |
        dotnet test src/Backend/KubernetesControlPanel.Tests/KubernetesControlPanel.Tests.csproj --configuration $(buildConfiguration) --no-build
      displayName: 'Run unit tests'
      continueOnError: true

    - script: |
        cd src/Frontend
        npm ci
      displayName: 'Install npm dependencies'

    - script: |
        cd src/Frontend
        npm run build
      displayName: 'Build React application'

- stage: Package
  displayName: 'Package Application'
  dependsOn: Build
  jobs:
  - job: Package
    displayName: 'Create Docker Image'
    pool:
      name: 'kubernetes-server-pool'
    steps:
    - script: |
        docker build -t $(dockerRegistry)/$(imageName):$(Build.BuildId) -t $(dockerRegistry)/$(imageName):latest -f docker/Dockerfile .
      displayName: 'Build Docker image'

    - script: |
        docker push $(dockerRegistry)/$(imageName):$(Build.BuildId)
        docker push $(dockerRegistry)/$(imageName):latest
      displayName: 'Push Docker image'

- stage: Deploy
  displayName: 'Deploy to Kubernetes'
  dependsOn: Package
  jobs:
  - job: Deploy
    displayName: 'Deploy to Kubernetes Cluster'
    pool:
      name: 'kubernetes-server-pool'
    steps:
    - script: |
        kubectl apply -f k8s/rbac.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
      displayName: 'Deploy to Kubernetes cluster'

    - script: |
        kubectl rollout status deployment/kubernetes-control-panel -n $(kubernetesNamespace) --timeout=600s
      displayName: 'Wait for deployment rollout'

    - script: |
        kubectl get pods -n $(kubernetesNamespace)
        kubectl get services -n $(kubernetesNamespace)
        kubectl get ingress -n $(kubernetesNamespace)
      displayName: 'Verify deployment status'
      continueOnError: true 