trigger:
  - master

variables:
  solution: 'KubernetesControlPanel.sln'
  buildConfiguration: 'Release'
  imageName: 'k8s-control-panel'
  imageTag: '$(Build.BuildId)'
  kubernetesNamespace: 'k8s-control-panel'
  dockerfilePath: 'docker/Dockerfile'
  # Ubuntu server details - update these with your actual server details
  ubuntuServer: 'vmi2671559'
  ubuntuUser: 'root'
  # Alternative: Use a simple registry (uncomment if SSH doesn't work)
  # dockerRegistry: 'registry.hub.docker.com'
  # fullImageName: '$(dockerRegistry)/$(imageName)'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Application'
    pool:
      name: 'Default'
    steps:
    - script: 'dotnet restore $(solution)'
      displayName: 'Restore NuGet packages'

    - script: 'dotnet build $(solution) --configuration $(buildConfiguration) --no-restore'
      displayName: 'Build solution'

    - script: |
        cd src/Frontend
        npm ci
      displayName: 'Install npm dependencies'

    - script: |
        cd src/Frontend
        npm run build
      displayName: 'Build React application'

- stage: Package
  displayName: 'Package Application'
  dependsOn: Build
  jobs:
  - job: Package
    displayName: 'Create and Transfer Docker Image'
    pool:
      name: 'Default'
    steps:
    - script: 'docker build -t $(imageName):$(imageTag) -t $(imageName):latest -f $(dockerfilePath) .'
      displayName: 'Build Docker image'

    - script: 'docker save $(imageName):latest > $(imageName).tar'
      displayName: 'Save Docker image to tar file'

    - script: 'scp $(imageName).tar $(ubuntuUser)@$(ubuntuServer):/tmp/'
      displayName: 'Transfer image to Ubuntu server'
      continueOnError: true

    - script: 'ssh $(ubuntuUser)@$(ubuntuServer) "docker load < /tmp/$(imageName).tar && rm /tmp/$(imageName).tar"'
      displayName: 'Load image on Ubuntu server'
      continueOnError: true

    - script: 'docker images | grep $(imageName)'
      displayName: 'List Docker images'

- stage: Deploy
  displayName: 'Deploy to Kubernetes'
  dependsOn: Package
  jobs:
  - job: Deploy
    displayName: 'Deploy to Kubernetes Cluster'
    pool:
      name: 'Default'
    steps:
    - script: 'kubectl create namespace $(kubernetesNamespace) --dry-run=client -o yaml | kubectl apply -f -'
      displayName: 'Ensure namespace exists'

    - script: 'kubectl apply -f k8s/rbac.yaml'
      displayName: 'Apply RBAC configuration'

    - script: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
      displayName: 'Apply Kubernetes manifests'

    - script: 'kubectl rollout status deployment/k8s-control-panel -n $(kubernetesNamespace) --timeout=600s'
      displayName: 'Wait for deployment rollout'

    - script: 'kubectl get pods -n $(kubernetesNamespace)'
      displayName: 'Check deployment status' 